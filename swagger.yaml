openapi: 3.0.3

info:
  version: '1.0'
  title: API-REST-SNET
servers:
- url: http://localhost:4320
  description: Localhost
- url: https://63a49ae1821953d4f2b936c4.mockapi.io/
  description: Server Mock
security:
- auth: []
paths:
  /health-check:
    get:
      summary: Verifica a funcionalidade do serviço
      tags:
      - Health Check
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Aplicação rodando com sucesso
                  status:
                    type: string
                    example: OK
        404:
          description: Erro na funcionalidade do serviço
          content:
            application/json:
              example: "Not found"
  /establishments:
    get:
      summary: Busca todos os estabelecimentos
      tags:
        - Establishments
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/allEstablishments"
        404:
          description: Erro ao buscar os estabelecimentos
          content:
            application/json:
              example: "Not found"
    post:
      summary: Cadastra um novo estabelecimento
      tags:
      - Establishments
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/establishment"
      responses:
        201:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/establishment"
        404:
          description: Erro ao cadastrar o estabelecimento
          content:
            application/json:
              example: "Not found"
  /establishments/{NumEstablishment}:
    parameters:
    - name: NumEstablishment
      in: path
      schema:
        type: integer
      required: true
    get:
      summary: Busca um estabelecimento pelo seu número
      tags:
      - Establishments
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/establishment"
        404:
          description: Erro ao buscar o estabelecimento
          content:
            application/json:
              example: "Not found"
    put:
      summary: Atualiza um estabelecimento pelo seu número
      tags:
        - Establishments
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/establishment"
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/establishment"
        404:
          description: Erro ao atualizar o estabelecimento
          content:
            application/json:
              example: "Not found"
    delete:
      summary: Deleta um estabelecimento pelo seu número
      tags:
        - Establishments
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/establishment"
        404:
          description: Erro ao deletar o estabelecimento
          content:
            application/json:
              example: "Not found"
  /stores:
    get:
      summary: Busca todas as lojas
      tags:
        - Stores
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/allStores"
        404:
          description: Erro ao buscar as lojas
          content:
            application/json:
              example: "Not found"
    post:
      summary: Cadastra uma nova loja
      tags:
        - Stores
      responses:
        201:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/store"
        404:
          description: Erro ao cadastrar a loja
          content:
            application/json:
              example: "Not found"
  /stores/{NumLoja}:
    parameters:
    - name: NumLoja
      in: path
      schema:
        type: integer
      required: true
    get:
      summary: Buscar uma loja pelo seu número
      tags:
        - Stores
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/store"
        404:
          description: Erro ao buscar a loja
          content:
            application/json:
              example: "Not found"
    put:
      summary: Atualiza uma loja pelo seu número
      tags:
        - Stores
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/store"
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/store"
        404:
          description: Erro ao atualizar a loja
          content:
            application/json:
              example: "Not found"
    delete:
      summary: Deletar uma loja
      tags:
        - Stores
      responses:
        200:
          description: Sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/store"
        404:
          description: Erro ao deletar o estabelecimento
          content:
            application/json:
              example: "Not found"
components:
  schemas:
    establishment:
      type: object
      properties:
        nome:
          type: string
        razao social:
          type: string
        endereco:
          type: string
        estado:
          type: string
        cidade:
          type: string
        cep:
          type: string
        numero do estabelecimento:
          type: integer
    allEstablishments:
      type: array
      items:
        $ref: "#/components/schemas/establishment"
    store:
      type: object
      properties:
        nome:
          type: string
        razao social:
          type: string
        endereco:
          type: string
        estado:
          type: string
        cidade:
          type: string
        cep:
          type: string
        numero da loja:
          type: integer
        id do estabelecimento:
          type: integer
    allStores:
      type: array
      items:
        $ref: "#/components/schemas/store"
  securitySchemes:
    auth:
      type: http
      scheme: bearer
      bearerFormat: JWT